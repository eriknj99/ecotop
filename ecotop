#!/usr/bin/python

# Try importing gpustat
# If it is not installed assume there are no nvidia GPUs
try:
    import gpustat
except:
    pass

import json
import io 
import os
import math
from termcolor import colored
from time import sleep
import sys
import signal
import yaml

# Try importing AMD deps
# If they are not found assume no AMD GPUs
try:
    import pyamdgpuinfo
    from amdgpu_fan.lib.amdgpu import Scanner
    from amdgpu_fan.lib.curve import Curve
except:
    pass

def drawGraph(lable, unit, val, max, color):
	
	numTicks = 10 
	
	tick = '┼'
	hLine = '─'	
	vLine = '│'
	c0 = '├'
	c1 = '┤'
	c2 = '└'
	c3 = '┘'
	bar = '█'
	halfBar = '▌'
	space = ' '
	
	rows, columns = os.popen('stty size', 'r').read().split()
	columns = int(columns) - (len(str(max) + '          ' + unit))

	#Draw Lable
	out = (lable + " | " + colored(str(val) + unit, color) + "\n")
	
	#Label ticks
	for i in range(0,numTicks):
		tmp = str(int(i*(max/numTicks))) + unit	
		out += tmp
		for j in range(0,int((int(columns)/numTicks) - ((len(tmp) - 1)))):
			out += ' ' 
	out += str(max) + unit + "\n"
	
	#Draw top ticks
	ticks = ''
	for i in range(0,numTicks+1):
		if(i == 0):
			ticks+=c0
		elif(i == numTicks):
			ticks+=c1
		else:
			ticks += tick
		if(i != numTicks):
			for j in range(0,int((int(columns)/numTicks))):
				ticks += hLine			
	out += ticks + "\n"


	
	#Fill in bar
	barLine = ""
	barSize = round((len(ticks) - 1) * float(val/max))
	for i in range(0, barSize - 1):
		barLine += bar	
		#out += "[" + barLine + " : " + str(len(barLine)) + "]\n"
	if(val != 0 and val != max):
		barLine += halfBar
	
	while(val != max and len(barLine) < len(ticks) - 2):
		barLine += space 
		
	out += vLine + colored(barLine,color) + vLine + "\n"
	
	#Draw bottom ticks
	ticks = ''
	for i in range(0,numTicks+1):
		if(i == 0):
			ticks+=c2
		elif(i == numTicks):
			ticks+=c3
		else:
			ticks += hLine
		if(i != numTicks):
			for j in range(0,int((int(columns)/numTicks))):
				ticks += hLine	

	out += ticks + "\n"

	return out



def temp(temp, i, color1, color2, color3):
	color = color1
	if(temp > 70):
		color = color2
	if(temp > 80):
		color = color3
	return drawGraph("Temperature (°C)", "°", temp,100, color)	

def util(util,i,color):
	return drawGraph("Utilization", "%", util,100, color)

def fan(fanSpeed,i,color):
	return drawGraph("Fan", "%", fanSpeed,100, color)

def power(powerDraw, powerMax, i, color):
	return drawGraph("Power", "W", powerDraw,powerMax, color)

def memoryPercent(memUsed, memTotal, i, color):
	return drawGraph("Memory", "%", round(100*(memUsed/memTotal)), 100, color)

def memoryVal(memUsed, memTotal, i, color):	
	return drawGraph("Memory", "Mb", memUsed,memTotal, color)

def memory(memUsed, memTotal, i, color):
	percent = colored(str(round(100*(memUsed/memTotal))) + '%', color)
	return drawGraph('Memory | ' + percent, 'Mb', memUsed,memTotal, color)

def help():
	print(""+
	"   _____________  __             \n"
	"  / __/ ___/ __ \/ /____  ___    \n"
	" / _// /__/ /_/ / __/ _ \/ _ \   \n"
	"/___/\___/\____/\__/\___/ .__/   \n"
	"                       /_/       \n")

	print("---HELP---\n"
	"Usage: ecotop <Gauge1> [Color(s)] ... <GaugeN> [Color(s)] \n"
	"╔════════════╦════╦═════════════╗  \n"
	"║Gauge       ║Arg ║Color(s)     ║  \n"
	"╠════════════╬════╬═════════════╣  \n"
	"┃Utilization ┃-u  ┃<color1>     ┃  \n"
	"┃Temperature ┃-t  ┃<color1,2,3> ┃  \n"
	"┃Fan Speed   ┃-f  ┃<color1>     ┃  \n"
	"┃Power Usage ┃-p  ┃<color1>     ┃  \n"
	"┃Memory      ┃-m  ┃<color1>     ┃  \n"
	"┃Memory (%)  ┃-mp ┃<color1>     ┃  \n"
	"┃Memory (Mb) ┃-mv ┃<color1>     ┃  \n"
	"┗━━━━━━━━━━━━┻━━━━┻━━━━━━━━━━━━━┛  \n\n"

	"-All Color Arguments are optional.\n"
	"-Gauges will be desplayed in the order they are entered.\n"
	"\n Colors\n"
	"┏━━━━━━━━┓\n"
	"┃"+colored('grey','grey')+"    ┃\n"
	"┃"+colored('red','red')+"     ┃\n"
	"┃"+colored('green','green')+"   ┃\n"
	"┃"+colored('yellow','yellow')+"  ┃\n"
	"┃"+colored('blue','blue')+"    ┃\n"
	"┃"+colored('magenta','magenta')+" ┃\n"
	"┃"+colored('cyan','cyan')+"    ┃\n"
	"┃"+colored('white','white')+"   ┃\n"
	"┗━━━━━━━━┛\n")
#This function with the line below it will clear the screen and exit when ctrl+c is pressed
def clear_on_exit(sig, frame):
	os.system('clear')
	sys.exit(0)

	
def renderNV():
    #Use GPUStat to retrieve GPU data as JSON
    g = gpustat.GPUStatCollection.new_query() 

    sio= io.StringIO()
    g.print_json(sio)
    j=json.loads(sio.getvalue())
    #Execute functions for each gpu in the argument specified order. 
    for i in range(0, len(j["gpus"])):
        output = (str(j["gpus"][i]["name"]) + "\n")
        for arg in orderedArgs:
            if(arg == 'u'):
                ut = j['gpus'][i]['utilization.gpu']
                output += util(ut,i,cu)
            if(arg == 't'):	
                tm = j['gpus'][i]['temperature.gpu']
                output += temp(tm,i,ct1,ct2,ct3)
            if(arg == 'f'):
                fanSpeed = j['gpus'][i]['fan.speed']
                output += fan(fanSpeed, i, cf)
            if(arg == 'p'):
                powerDraw = j['gpus'][i]['power.draw']
                maxPower = j['gpus'][i]['enforced.power.limit']
                output += power(powerDraw, maxPower, i, cp)
            if(arg == 'm'):
                memUsed = j['gpus'][i]['memory.used']
                memTotal = j['gpus'][i]['memory.total']
                output += memory(memUsed, memTotal, i, cm)
            if(arg == 'mp'):
                memUsed = j['gpus'][i]['memory.used']
                memTotal = j['gpus'][i]['memory.total']
                output += memoryPercent(memUsed, memTotal, i, cmp)
            if(arg == 'mv'):
                memUsed = j['gpus'][i]['memory.used']
                memTotal = j['gpus'][i]['memory.total']
                output += memoryVal(memUsed, memTotal, i, cmv)	
    return output

# There is a kernel bug that makes it imposible to read the actual PWM value for AMD GPUs.
# This function will read your amdgpu-fan config file and calculate the value that amdgpu-fan should set the fan speed to for a given temperature. 
# It will return the correct value ONLY if amdgpu-fan is configured correctly and currently running.
# It does not account for multi card configurations.
def getAMDFanSpeedHack(temp):
    location = '/etc/amdgpu-fan.yaml'
    #If the config file does not exist use the default configuration
    config = yaml.load('''
                speed_matrix:
                - [0, 0]
                - [30, 33]
                - [45, 50]
                - [60, 66]
                - [65, 69]
                - [70, 75]
                - [75, 89]
                - [80, 100]''')

    if os.path.isfile(location):
        with open(location) as f:
            config = yaml.load(f)
    
    curve = Curve(config.get('speed_matrix'))
    return int(curve.get_speed(temp))

# This function will return the actual reported fan speed for your AMD GPU with givin id.
# Due to a kernel bug this currently will always return 0 and is not used.
def getAMDFanSpeedReal(id):
    scanner = Scanner()
    return int(scanner.cards.get("card" + str(gpu.gpu_id)).fan_speed)
    
def renderAMD():
    n_devices = pyamdgpuinfo.detect_gpus()
    #Execute functions for each gpu in the argument specified order. 
    for i in range(0, n_devices):
        gpu = pyamdgpuinfo.get_gpu(i)
        
        output = (str(gpu.name) + "\n")
        for arg in orderedArgs:
            if(arg == 'u'):
                ut = int(gpu.query_load() * 100)
                output += util(ut,i,cu)
            if(arg == 't'):	
                tm = gpu.query_temperature()
                output += temp(tm,i,ct1,ct2,ct3)
            if(arg == 'f'):
                fanSpeed = getAMDFanSpeedHack(gpu.query_temperature()) 
                output += fan(fanSpeed, i, cf)
            if(arg == 'p'):
                powerDraw = gpu.query_power()
                maxPower = 250
                output += power(powerDraw, maxPower, i, cp)
            if(arg == 'm'):
                memUsed = int(gpu.query_vram_usage() / 100000)
                memTotal = int(gpu.memory_info["vram_size"] / 100000)
                output += memory(memUsed, memTotal, i, cm)
            if(arg == 'mp'):
                memUsed =  gpu.query_vram_usage()
                memTotal = gpu.memory_info["vram_size"]
                output += memoryPercent(memUsed, memTotal, i, cmp)
            if(arg == 'mv'):
                memUsed = gpu.query_vram_usage()
                memTotal = gpu.memory_info["vram_size"]
                output += memoryVal(memUsed, memTotal, i, cmv)	
    return output

# --Program Start--

signal.signal(signal.SIGINT, clear_on_exit)

orderedArgs = []

#Default colors
cu = 'red'
ct1 = 'blue'
ct2 = 'yellow'
ct3 = 'red'
cf = 'cyan' 
cp = 'yellow'
cm = 'green'
cmp = 'green'
cmv = 'green'


#Parse input args
for i in range(1,len(sys.argv)):
	if(sys.argv[i] == 'help' or sys.argv[i] == '--help' or sys.argv[i] == '-h'):
		help()
		exit(0)		

	if(sys.argv[i] == '-u'):
		orderedArgs.append("u")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cu = sys.argv[i+1]
	if(sys.argv[i] == '-t'):
		orderedArgs.append("t")	
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			ct1 = sys.argv[i+1]
		if(i < len(sys.argv)-2 and "-" not in sys.argv[i+2]):
			ct2 = sys.argv[i+2]	
		if(i < len(sys.argv)-3 and "-" not in sys.argv[i+3]):
			ct3 = sys.argv[i+3]	
	if(sys.argv[i] == '-f'):
		orderedArgs.append("f")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cf = sys.argv[i+1]
	if(sys.argv[i] == '-p'):
		orderedArgs.append("p")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cp = sys.argv[i+1]
	if(sys.argv[i] == '-m'):
		orderedArgs.append("m")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cm = sys.argv[i+1]
	if(sys.argv[i] == '-mp'):
		orderedArgs.append("mp")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cmp = sys.argv[i+1]	
	if(sys.argv[i] == '-mv'):
		orderedArgs.append("mv")
		if(i < len(sys.argv)-1 and "-" not in sys.argv[i+1]):
			cmv = sys.argv[i+1]	

output = ''

if(len(orderedArgs) == 0):
	output = ("No arguments given, using default config.\nType 'ecotop help' for more options.\n\n\n")
	orderedArgs.append("u")
	orderedArgs.append("t")
	orderedArgs.append("f")
	orderedArgs.append("p")
	orderedArgs.append("mp")

# Scan for AMD GPUs
num_amd = 0
try:
    num_amd = pyamdgpuinfo.detect_gpus()
except:
    pass

# Scan for Nvidia GPUs
num_nv = 0
try:
    g = gpustat.GPUStatCollection.new_query() 
    sio= io.StringIO()
    g.print_json(sio)
    j=json.loads(sio.getvalue())
    num_nv = len(j["gpus"])
except:
    pass

if(num_amd == 0 and num_nv == 0):
    print("No compatible GPUs detected. \nAre you sure you installed the required dependencies for your cards?")
    exit(1)

while(True):
    if(num_amd != 0):
        amdGraphs = renderAMD()
    else:
        amdGraphs = ""

    if(num_nv != 0): 
        nvGraphs = renderNV()
    else:
        nvGraphs = ""

    os.system('clear')
    print(amdGraphs,end="")
    print(nvGraphs,end="")

    sleep(1)
	
	

